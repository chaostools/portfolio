{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! I'm currently a student at the University of Minnesota pursuing a B.S. and M.S. of Computer Science. Interested in robotics, machine learning, artificial intelligence, graph databases, and rapid prototyping. Passionate about mentoring kids in their programming endeavours through CoderDojo Twin Cities. As an Eagle Scout, I've had experience working with and leading teams. Skills Python \u2022 C/C++ \u2022 Machine Learning \u2022 Git \u2022 Spark \u2022 Java \u2022 Go \u2022 Graph Databases \u2022 Docker \u2022 Gradle \u2022 OCaml \u2022 SQL \u2022 Microsoft Office \u2022 Technical Writing \u2022 UNIX Bash scripting \u2022 R \u2022 HTML and CSS \u2022 AWS/Cloud Computing \u2022 3D printing Education B.S. of Computer Science \u2022 University of Minnesota Twin Cities \u2022 Class of 2021 3.8 GPA. Dean\u2019s List. A year ahead in coursework. Participate in Jazz Band and Pep Band. Courses taken include Data Science II, Algorithms and Data Structures, Intro to Statistics, and Intro to Operating Systems. M.S. of Computer Science \u2022 University of Minnesota Twin Cities \u2022 Class of 2022 Will take graduate-level classes starting in the Spring of 2021. Diploma with Highest Honors \u2022 Robbinsdale Armstrong High School \u2022 Class of 2018 4.0/4.0 GPA. AP Scholar Award in 2017 and 2018. Quiz Bowl Captain. Alto Saxophone Section Leader in Marching Band. Participated in Jazz Band, Pep Band, Marching Band, Pit Orchestra, and on the Varsity Tennis team. Experience Software Engineering Intern \u2022 Optum, A UnitedHealth Group Company \u2022 Summer 2019 Developed a financial and claims fraud detection system using a graph convolutional neural network and graph database technology. The solution developed is currently in the patenting process. Mentor \u2022 CoderDojo Twin Cities \u2022 2014 - Present Coaches and inspires kids to create projects using programming and electronics through single board computers and microcontrollers such as the Raspberry Pi and Arduino. Eagle Scout \u2022 October 2015 Developed communication and leadership skills through the planning and execution of Troop activities. Retail Sales Specialist \u2022 REI Co-Op \u2022 2016 - Present Provide excellent customer service through good communication and teamwork with my coworkers. Contact Interested in working together? Contact me at: parker.erickson30@gmail.com 763-202-3059","title":"Home"},{"location":"#welcome","text":"I'm currently a student at the University of Minnesota pursuing a B.S. and M.S. of Computer Science. Interested in robotics, machine learning, artificial intelligence, graph databases, and rapid prototyping. Passionate about mentoring kids in their programming endeavours through CoderDojo Twin Cities. As an Eagle Scout, I've had experience working with and leading teams.","title":"Welcome!"},{"location":"#skills","text":"Python \u2022 C/C++ \u2022 Machine Learning \u2022 Git \u2022 Spark \u2022 Java \u2022 Go \u2022 Graph Databases \u2022 Docker \u2022 Gradle \u2022 OCaml \u2022 SQL \u2022 Microsoft Office \u2022 Technical Writing \u2022 UNIX Bash scripting \u2022 R \u2022 HTML and CSS \u2022 AWS/Cloud Computing \u2022 3D printing","title":"Skills"},{"location":"#education","text":"","title":"Education"},{"location":"#bs-of-computer-science-university-of-minnesota-twin-cities-class-of-2021","text":"3.8 GPA. Dean\u2019s List. A year ahead in coursework. Participate in Jazz Band and Pep Band. Courses taken include Data Science II, Algorithms and Data Structures, Intro to Statistics, and Intro to Operating Systems.","title":"B.S. of Computer Science \u2022 University of Minnesota Twin Cities \u2022 Class of 2021"},{"location":"#ms-of-computer-science-university-of-minnesota-twin-cities-class-of-2022","text":"Will take graduate-level classes starting in the Spring of 2021.","title":"M.S. of Computer Science \u2022 University of Minnesota Twin Cities \u2022 Class of 2022"},{"location":"#diploma-with-highest-honors-robbinsdale-armstrong-high-school-class-of-2018","text":"4.0/4.0 GPA. AP Scholar Award in 2017 and 2018. Quiz Bowl Captain. Alto Saxophone Section Leader in Marching Band. Participated in Jazz Band, Pep Band, Marching Band, Pit Orchestra, and on the Varsity Tennis team.","title":"Diploma with Highest Honors \u2022 Robbinsdale Armstrong High School \u2022 Class of 2018"},{"location":"#experience","text":"","title":"Experience"},{"location":"#software-engineering-intern-optum-a-unitedhealth-group-company-summer-2019","text":"Developed a financial and claims fraud detection system using a graph convolutional neural network and graph database technology. The solution developed is currently in the patenting process.","title":"Software Engineering Intern \u2022 Optum, A UnitedHealth Group Company \u2022 Summer 2019"},{"location":"#mentor-coderdojo-twin-cities-2014-present","text":"Coaches and inspires kids to create projects using programming and electronics through single board computers and microcontrollers such as the Raspberry Pi and Arduino.","title":"Mentor \u2022 CoderDojo Twin Cities \u2022 2014 - Present"},{"location":"#eagle-scout-october-2015","text":"Developed communication and leadership skills through the planning and execution of Troop activities.","title":"Eagle Scout \u2022 October 2015"},{"location":"#retail-sales-specialist-rei-co-op-2016-present","text":"Provide excellent customer service through good communication and teamwork with my coworkers.","title":"Retail Sales Specialist \u2022 REI Co-Op \u2022 2016 - Present"},{"location":"#contact","text":"Interested in working together? Contact me at: parker.erickson30@gmail.com 763-202-3059","title":"Contact"},{"location":"projects/","text":"Baseball Pitch Prediction Using various machine learning methods, I was able to predict the next pitch of an at-bat with up to 75% accuracy. pyTigerGraph A Python package that interfaces with a TigerGraph database's REST API. More information can be found here . AI Racing League Created and tested a variety of computer vision algorithms to autonomously control an RC Car. Also teach AI concepts to kids at CoderDojo. IPO Prediction using Graph Convolutional Neural Networks Used TigerGraph Cloud, Gradle, and pyTigerGraph to predict companies that would IPO using Graph Convolutional Neural Networks. Check out the blog post here @mlstyletransfer A Twitter bot that uses machine learning to transfer a certain style of art onto an user-provided photo. Hosted on AWS services. Uses Keras, Python, SQL, HTML, and CSS. The code for the style transfer is here . The code that handles collecting the tweets and inserting them into the database is here . Want to check out some of the results? Check out the gallery .","title":"Projects"},{"location":"projects/#baseball-pitch-prediction","text":"Using various machine learning methods, I was able to predict the next pitch of an at-bat with up to 75% accuracy.","title":"Baseball Pitch Prediction"},{"location":"projects/#pytigergraph","text":"A Python package that interfaces with a TigerGraph database's REST API. More information can be found here .","title":"pyTigerGraph"},{"location":"projects/#ai-racing-league","text":"Created and tested a variety of computer vision algorithms to autonomously control an RC Car. Also teach AI concepts to kids at CoderDojo.","title":"AI Racing League"},{"location":"projects/#ipo-prediction-using-graph-convolutional-neural-networks","text":"Used TigerGraph Cloud, Gradle, and pyTigerGraph to predict companies that would IPO using Graph Convolutional Neural Networks. Check out the blog post here","title":"IPO Prediction using Graph Convolutional Neural Networks"},{"location":"projects/#mlstyletransfer","text":"A Twitter bot that uses machine learning to transfer a certain style of art onto an user-provided photo. Hosted on AWS services. Uses Keras, Python, SQL, HTML, and CSS. The code for the style transfer is here . The code that handles collecting the tweets and inserting them into the database is here . Want to check out some of the results? Check out the gallery .","title":"@mlstyletransfer"},{"location":"blog/ipoGCN/","text":"Predicting Initial Public Offerings Using Graph Convolutional Neural Networks May 20th, 2020 About a year ago, I was introduced to the concept of graph databases, and how they represent data differently compared to a tabular, relational database. I was fascinated that there was a way to store and find relationships in data in a manner that I found more intuitive instead of computing JOINs on tabular data. If two pieces of data are related, in a graph database, you simply create an edge between them. Since the data is in a graph, you can perform all the standard graph algorithms on your database, such as breadth and depth-first search, shortest path algorithms, and similarity algorithms. All of these algorithms work off the edges (relationships) between the various data points. Turns out, there are machine learning algorithms that also work with the relationships between the data. This article will walk through the steps to get your own graph machine learning pipeline up and running \u2014 from database to predictions. Photo by Rick Tap on Unsplash First, we will set up a TigerGraph Cloud instance with an example dataset from Crunchbase. This data has about 200,000 companies in various stages of funding, and contains information such as if they have achieved an Initial Public Offering (IPO), the key investors of the company, the founders, their headquarters location, etc. We will then connect to the database using pyTigerGraph and Giraffle inside of a Jupyter Notebook. Finally, we will set up a Graph Convolutional Neural Network (GCN) to predict whether a given company in our dataset will IPO. To follow along with the code, check out the repository here. Setting Up TigerGraph Cloud I\u2019m not going to go that in-depth with setting up a TigerGraph Cloud instance, as this article does a really good job walking you through the steps of provisioning an instance. On step 1, simply choose the \u201cEnterprise Knowledge Graph (Crunchbase)\u201d starter kit. Once you have your starter kit up and running, we will have to get a SSL certificate to access the server via Gradle. In your project directory, type this into your terminal: openssl s_client -connect <YOUR_HOSTNAME_HERE>.i.tgcloud.io:14240 < /dev/null 2> /dev/null | \\ openssl x509 -text > cert.txt We also need to create two other files. First, lets create a gradle-local.properties file in the base project directory. This should contain: gsqlHost=YOUR_HOSTNAME_HERE.i.tgcloud.io gsqlUserName=tigergraph gsqlPassword=YOUR_PASSWORD_HERE gsqlAdminUserName=tigergraph gsqlAdminPassword=YOUR_PASSWORD_HERE gsqlCaCert=./cert.txt The other should be placed in the py_scripts/ directory and be named cfg.py. This should contain: secret = \"YOUR_SECRET_HERE\" token = \"\" password = \"YOUR_PASSWORD_HERE\" The secret key can be obtained in Graph Studio under the admin page. Installing Queries and Pulling Data We will use two different tools to interface with our TigerGraph cloud instance: Giraffle and pyTigerGraph. Giraffle will allow us to install queries we need to run on the database, while pyTigerGraph will provide an interface for us to pull the results of those queries into Python. Giraffle Giraffle is a plugin for Gradle, a build system. This allows you to easily package up code to be deployed on various different platforms and use version control software such as Git to keep track of the queries you write for the database. For more information, check out its project page here. The Queries We install the queries in the first few cells of the Jupyter Notebook through a couple of terminal commands. What each query does is outlined below: - companyLinks computes relationships between companies in TigerGraph and returns them in a JSON payload that we can parse with Python. This oversimplifies the graph here. The query returns pairs of companies that have something in common. This hurts accuracy, as some common elements (founders, investors, etc.) might be more important than location or industry. It is possible to create a GCN that has multiple types of vertices, (known as a Relational Graph Convolutional Notebook) but it is more complex. A good way to get started is to simplify the graph until you only have relations between the same type of thing. - getAllCompanies does exactly what the name implies \u2014 it returns a list of all companies found in the dataset. The reason why we need this will become apparent in the next section. - getAllIpo gets all the companies that have IPOed found in the dataset. This is useful in the next section, as well as checking our accuracy of predictions. pyTigerGraph In order to get the results from the queries we installed, we will use pyTigerGraph. For more information, check out the package on my GitHub here. Undersampling Data Alright, now that we got all of the queries installed and the data pulled into our notebook, notice a few things. First, the number of IPOed companies is minuscule (about 1,200) compared to the total number of companies (about 200,000). This means that the dataset is extremely unbalanced, and that will lead to the GCN predicting every company not to IPO (that way it would be 99.4% accurate). Another thing to take into account is that most computers will not have enough memory to run a GCN on the full graph. Conveniently, the unbalanced data means that we should undersample the non-IPOed companies in order to make a more evenly balanced dataset. This results in a graph that has about 2,000 vertices, evenly split between companies that have IPOed and ones that have not. There is a drawback to this approach, however. Since these companies are randomly sampled from the non-IPOed and IPOed list, we cannot guarantee that there are many edges between each company, which hurts our accuracy quite a bit. The Graph Convolutional Neural Network Classification using a Graph Convolutional Neural Network (Source: https://docs.dgl.ai/en/latest/tutorials/basics/1_first.html) A Graph Convolutional Neural Network (GCN) is a semi-supervised classification algorithm that works off of the connections in the graph, as well as the features of each vertex. The concept is similar to a traditional image-based convolutional neural network, but instead of looking at adjacent pixels, the GCN looks at vertices that are connected via an edge. The vertex features can be any vector, such as a doc2vec representation of the various attributes of the vertex, or simply just a one-hot encoded vector, which is what I chose to do here. We then label two different vertices, one that is known to have IPOed and another that hasn\u2019t. Our neural network architecture is pretty straight forward. It consists of two layers, with an input dimension equal to the number of entries in the feature vector (it also happens to be the number of vertices in the graph since we one-hot encoded them). We then pass the input through a layer with 32 neurons, and then out through 2 neurons that will provide our output. We use Adam as our optimizer for the training process. We then begin the training loop. Unfortunately, due to our undersampling of the graph earlier, the GCN does not always have enough edges in the graph to reliably make predictions accurately. I usually get about 60% accuracy, but it does vary quite a bit due to the random sample of companies. Conclusion The GCN is not a great method to predict if a company will IPO or not, due to the memory constraints and the need for undersampling the graph. Other graph machine learning methods, such as node2vec might fair better. Another way that accuracy might improve is using a relational graph convolutional neural network (R-GCN) which would work on graphs with multiple different types of vertices. Credits Article and notebook written by Parker Erickson, a student at the University of Minnesota pursuing a B.S. in Computer Science. His interests include graph databases, machine learning, traveling, playing the saxophone, and watching Minnesota Twins baseball. Feel free to reach out! Find him at: LinkedIn: https://www.linkedin.com/in/parker-erickson/ GitHub: https://github.com/parkererickson Email: parker.erickson30@gmail.com GCN Resources: DGL Documentation: https://docs.dgl.ai/ GCN paper by Kipf and Welling https://arxiv.org/abs/1609.02907 R-GCN paper: https://arxiv.org/abs/1703.06103 Notebook adapted from: https://docs.dgl.ai/en/latest/tutorials/basics/1_first.html","title":"IPO Prediction Using Graph Convolutional Neural Networks"},{"location":"blog/ipoGCN/#predicting-initial-public-offerings-using-graph-convolutional-neural-networks","text":"May 20th, 2020 About a year ago, I was introduced to the concept of graph databases, and how they represent data differently compared to a tabular, relational database. I was fascinated that there was a way to store and find relationships in data in a manner that I found more intuitive instead of computing JOINs on tabular data. If two pieces of data are related, in a graph database, you simply create an edge between them. Since the data is in a graph, you can perform all the standard graph algorithms on your database, such as breadth and depth-first search, shortest path algorithms, and similarity algorithms. All of these algorithms work off the edges (relationships) between the various data points. Turns out, there are machine learning algorithms that also work with the relationships between the data. This article will walk through the steps to get your own graph machine learning pipeline up and running \u2014 from database to predictions. Photo by Rick Tap on Unsplash First, we will set up a TigerGraph Cloud instance with an example dataset from Crunchbase. This data has about 200,000 companies in various stages of funding, and contains information such as if they have achieved an Initial Public Offering (IPO), the key investors of the company, the founders, their headquarters location, etc. We will then connect to the database using pyTigerGraph and Giraffle inside of a Jupyter Notebook. Finally, we will set up a Graph Convolutional Neural Network (GCN) to predict whether a given company in our dataset will IPO. To follow along with the code, check out the repository here.","title":"Predicting Initial Public Offerings Using Graph Convolutional Neural Networks"},{"location":"blog/ipoGCN/#setting-up-tigergraph-cloud","text":"I\u2019m not going to go that in-depth with setting up a TigerGraph Cloud instance, as this article does a really good job walking you through the steps of provisioning an instance. On step 1, simply choose the \u201cEnterprise Knowledge Graph (Crunchbase)\u201d starter kit. Once you have your starter kit up and running, we will have to get a SSL certificate to access the server via Gradle. In your project directory, type this into your terminal: openssl s_client -connect <YOUR_HOSTNAME_HERE>.i.tgcloud.io:14240 < /dev/null 2> /dev/null | \\ openssl x509 -text > cert.txt We also need to create two other files. First, lets create a gradle-local.properties file in the base project directory. This should contain: gsqlHost=YOUR_HOSTNAME_HERE.i.tgcloud.io gsqlUserName=tigergraph gsqlPassword=YOUR_PASSWORD_HERE gsqlAdminUserName=tigergraph gsqlAdminPassword=YOUR_PASSWORD_HERE gsqlCaCert=./cert.txt The other should be placed in the py_scripts/ directory and be named cfg.py. This should contain: secret = \"YOUR_SECRET_HERE\" token = \"\" password = \"YOUR_PASSWORD_HERE\" The secret key can be obtained in Graph Studio under the admin page.","title":"Setting Up TigerGraph Cloud"},{"location":"blog/ipoGCN/#installing-queries-and-pulling-data","text":"We will use two different tools to interface with our TigerGraph cloud instance: Giraffle and pyTigerGraph. Giraffle will allow us to install queries we need to run on the database, while pyTigerGraph will provide an interface for us to pull the results of those queries into Python. Giraffle Giraffle is a plugin for Gradle, a build system. This allows you to easily package up code to be deployed on various different platforms and use version control software such as Git to keep track of the queries you write for the database. For more information, check out its project page here.","title":"Installing Queries and Pulling Data"},{"location":"blog/ipoGCN/#the-queries","text":"We install the queries in the first few cells of the Jupyter Notebook through a couple of terminal commands. What each query does is outlined below: - companyLinks computes relationships between companies in TigerGraph and returns them in a JSON payload that we can parse with Python. This oversimplifies the graph here. The query returns pairs of companies that have something in common. This hurts accuracy, as some common elements (founders, investors, etc.) might be more important than location or industry. It is possible to create a GCN that has multiple types of vertices, (known as a Relational Graph Convolutional Notebook) but it is more complex. A good way to get started is to simplify the graph until you only have relations between the same type of thing. - getAllCompanies does exactly what the name implies \u2014 it returns a list of all companies found in the dataset. The reason why we need this will become apparent in the next section. - getAllIpo gets all the companies that have IPOed found in the dataset. This is useful in the next section, as well as checking our accuracy of predictions.","title":"The Queries"},{"location":"blog/ipoGCN/#pytigergraph","text":"In order to get the results from the queries we installed, we will use pyTigerGraph. For more information, check out the package on my GitHub here.","title":"pyTigerGraph"},{"location":"blog/ipoGCN/#undersampling-data","text":"Alright, now that we got all of the queries installed and the data pulled into our notebook, notice a few things. First, the number of IPOed companies is minuscule (about 1,200) compared to the total number of companies (about 200,000). This means that the dataset is extremely unbalanced, and that will lead to the GCN predicting every company not to IPO (that way it would be 99.4% accurate). Another thing to take into account is that most computers will not have enough memory to run a GCN on the full graph. Conveniently, the unbalanced data means that we should undersample the non-IPOed companies in order to make a more evenly balanced dataset. This results in a graph that has about 2,000 vertices, evenly split between companies that have IPOed and ones that have not. There is a drawback to this approach, however. Since these companies are randomly sampled from the non-IPOed and IPOed list, we cannot guarantee that there are many edges between each company, which hurts our accuracy quite a bit.","title":"Undersampling Data"},{"location":"blog/ipoGCN/#the-graph-convolutional-neural-network","text":"Classification using a Graph Convolutional Neural Network (Source: https://docs.dgl.ai/en/latest/tutorials/basics/1_first.html) A Graph Convolutional Neural Network (GCN) is a semi-supervised classification algorithm that works off of the connections in the graph, as well as the features of each vertex. The concept is similar to a traditional image-based convolutional neural network, but instead of looking at adjacent pixels, the GCN looks at vertices that are connected via an edge. The vertex features can be any vector, such as a doc2vec representation of the various attributes of the vertex, or simply just a one-hot encoded vector, which is what I chose to do here. We then label two different vertices, one that is known to have IPOed and another that hasn\u2019t. Our neural network architecture is pretty straight forward. It consists of two layers, with an input dimension equal to the number of entries in the feature vector (it also happens to be the number of vertices in the graph since we one-hot encoded them). We then pass the input through a layer with 32 neurons, and then out through 2 neurons that will provide our output. We use Adam as our optimizer for the training process. We then begin the training loop. Unfortunately, due to our undersampling of the graph earlier, the GCN does not always have enough edges in the graph to reliably make predictions accurately. I usually get about 60% accuracy, but it does vary quite a bit due to the random sample of companies.","title":"The Graph Convolutional Neural Network"},{"location":"blog/ipoGCN/#conclusion","text":"The GCN is not a great method to predict if a company will IPO or not, due to the memory constraints and the need for undersampling the graph. Other graph machine learning methods, such as node2vec might fair better. Another way that accuracy might improve is using a relational graph convolutional neural network (R-GCN) which would work on graphs with multiple different types of vertices.","title":"Conclusion"},{"location":"blog/ipoGCN/#credits","text":"Article and notebook written by Parker Erickson, a student at the University of Minnesota pursuing a B.S. in Computer Science. His interests include graph databases, machine learning, traveling, playing the saxophone, and watching Minnesota Twins baseball. Feel free to reach out! Find him at: LinkedIn: https://www.linkedin.com/in/parker-erickson/ GitHub: https://github.com/parkererickson Email: parker.erickson30@gmail.com GCN Resources: DGL Documentation: https://docs.dgl.ai/ GCN paper by Kipf and Welling https://arxiv.org/abs/1609.02907 R-GCN paper: https://arxiv.org/abs/1703.06103 Notebook adapted from: https://docs.dgl.ai/en/latest/tutorials/basics/1_first.html","title":"Credits"}]}